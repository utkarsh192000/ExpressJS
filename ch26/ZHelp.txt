TO START THE APPLICATION MANDATORY STEPS and folder division :


                    
1) npm init -y to create package.json

2) got  to package.json and set 
    "type":"module"
3) install express 5.0 by
    npm i express@5.0.0-alpha.8 
    you will se it in dependencies
4)  install nodemon as development dependencies by
    npm install -D nodemon
5) go to script in package.json and set
    "dev":"nodemon app"

6)  to run the APPLICATION use 
   nodemon run dev 

7) create a app.js file to write a code
    -> this would be the entry point of APPLICATION


    
// COMMON CODE FOR MOST OF THE APPLICATION


import express from 'express'
// imported express module 


const app=express();
// created a instance of express 

const port= process.env.PORT || '3000';
// set a port ; it will either be taken from env or it will 3000

app.get('/',(req,res)=>{
    res.send("Hello World");
});



app.listen(port,()=>{
    console.log(`Server is listening at http://localhost:${port}`);
});
// using .listen() method to run a server at a particluar port 






8) make routes folder where we would be writing different routes for different modules separately 
        -> inside that make files for each module like student.js , teacher.js , subject.js 
        -> write routes for each module in there files separately , 
        -> dont forget to export and import them 
        -> path would be concatenated along with path in app.js 

9) make a controllers folder where we going to write the callback which will be used in routes folder , 
modules.js like ( student.js , teachers.js  )  
 -> remember to save them with same them with some name and export ; so that we can import them in routes/module.js
    and use there 


10) since we are going to use EJS As Template engine , install ejs by 
    npm install ejs 

11) since we will also be having a database ; here in this case we would be using MONGODB 
    -> Install mongoose for this purpose  by 
        npm install mongoose 

=> Make a separate folder db , where we will be writing the separate code for connection of MongoDB with our application 
    -> inside it make a file connectDB.js and write template code 

import mongoose from "mongoose";

const connectDB=async(DATABASE_URL)=>{
    try{
        const DB_OPTIONS={
            dbName:'dbName',
        }
        await mongoose.connect(DATABASE_URL,DB_OPTIONS);
        console.log('Connected Successfully.....');
    }
    catch(err){
        console.log(err);
    }
} 

export default connectDB

NOTE : for this to work in app.js ,
 -> import it and DEFINE DATABASE_URL 

    import connectDB from './db/connectdb.js';
    // import connectDB , so that we call call it 
    const DATABASE_URL = process.env.DATABASE_URL || "mongodb://localhost:27017"
    // set the value of DATABASE URL which can be used directly by name 
 
 -> call the function 

    // DATABASE CONNECTION 
    connectDB(DATABASE_URL);


12) since we will have a Database , so we will also be having Models on which those CRUD operation would be performed 

-> Create a models folder , inside that we will have different ModelName.js file
-> Inside that ModelName.js file 
    1)import mongoose from 'mongoose'
    2) DEFIne schema for Model
    3) Compile Schema 
    4) Export the model 

13) Make Views folder where we are going to have all our template ejs files 
    -> inside that have a folder , named as partials , that will have all ejs files of common code 
        ex: navbar.ejs , header.ejs, footer.ejs
     -> outside write individual code files 
        ex: registration.ejs, login.ejs,index.ejs    
    -> in app.js . set up the Template engine
        
        app.set('view engine','ejs');

14) Also In View Set up a BOOSTRAP Access Code 

    css)
    link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet"
        integrity="sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3" crossorigin="anonymous">
   
    JS)
     <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"
        integrity="sha384-ka7Sk0Gln4gmtz2MlQnikT1wXgYsOg+OMhuP+IlRH9sENBO0LRn5q+8nbTov4+1p"
        crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.10.2/dist/umd/popper.min.js"
        integrity="sha384-7+zCNj/IqJ95wo16oMtfsKbZ9ccEh31eOz1HGyDuCQ6wgnyJNSYdrPa03rtR1zdB"
        crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.min.js"
        integrity="sha384-QJHtvGhmr9XOIpI6YVutG+2QOK9T+ZnN4kzFN1RtK3zEFEIsxhlmWl5/YESvpZ13"
        crossorigin="anonymous"></script>
